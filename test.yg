## hello this is
multiline
yes yes ##

let smth = && &= xinchao >> # blah blah blah
(){}[]-=+_-_


"chuugoku string test"
'this too'
'yo wassup
		hello
xx
#
##
123
)(#@*^!$&%$&@#!```
'

0x12345 0X12345
0b1010101 0B1010101
0q123123 0Q123123
0O12345 0o12345

1
2
3

.9
.123e2

12.23e2
12.23e+2
12.23e-2


const g = true

struct smthin:
	float x
	float y

	# the following is compile time code
	if g:
		# wanna add another member here maybe
		# but need to distinguish from local variables so need keyword ig

		# phantom goes hard i aint gonna lie
		phantom float z



macro lmgrngr($dims, $dim):
	# so what i always wanted to do is have a programmatically made nested loop for collision engines like
	int i[$dim]
	phantom for let j = 0; j < $dim; ++j: # ok so i think this shoudl be phantom and not literally everything else
		# idk if this would work like this lmfao wait
		for i[j] = 0; i[j] < $dims[j]; ++i[j]:
			# so that above would be like idk executed multiple times or smthing, or like, created multiple times you know


## wanted effect of the above
for dim = 2
##

int i[2]
for i[0] = 0; i[0] < dims[0]; ++i[0]:
	for i[1] = 0; i[1] < dims[1]; ++i[1]:
		# ez do smthing like multiply them or whatever

##
like idk a language that has support for this kind of shenanigams lmfao maybe except nim
but in nim u have to deal with the actual ast to do this i think
##

10.
10.001e-1
10e
